// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id            Int            @id @default(autoincrement())
  name          String
  teacher       User           @relation(fields: [teacherId], references: [id], name: "Teacher", onDelete: Cascade)
  teacherId     String
  students      User[]         @relation("Student")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  announcements Announcement[]
  sets          Set[]
  assignments   Assignment[]
}

enum AnnouncementLevel {
  IMPORTANT
  NORMAL
}

model Announcement {
  id        Int               @id @default(autoincrement())
  text      String
  level     AnnouncementLevel @default(NORMAL)
  course    Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Set {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  words       Word[]
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    Int
}

model Word {
  id         Int     @id @default(autoincrement())
  term       String
  definition String?
  image      String?
  set        Set     @relation(fields: [setId], references: [id], onDelete: Cascade)
  setId      Int
}

model Assignment {
  id            Int             @id @default(autoincrement())
  title         String
  description   String?
  expiresIn     String          @default("72h")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  course        Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId      Int
  questions     Question[]
  scores        Score[]
  StudentAnswer StudentAnswer[]
}

model Question {
  id             Int             @id @default(autoincrement())
  text           String
  image          String?
  audio          String?
  assignment     Assignment      @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId   Int
  answers        Answer[]
  explanation    String?
  studentAnswers StudentAnswer[]
}

model Answer {
  id             Int             @id @default(autoincrement())
  text           String?
  image          String?
  audio          String?
  right          Boolean         @default(false)
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId     Int
  studentAnswers StudentAnswer[]
}

model StudentAnswer {
  id           Int        @id @default(autoincrement())
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId Int
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   Int
  answer       Answer     @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId     Int

  @@unique([studentId, assignmentId, questionId, answerId])
}

model Score {
  id           Int        @id @default(autoincrement())
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId Int
  points       Float

  @@unique([assignmentId, studentId])
}

// Necessary for Next auth
enum UserRole {
  TEACHER
  STUDENT
}

enum UserStatus {
  PENDING
  ACTIVATED
  DEACTIVATED
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String?         @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  role             UserRole        @default(STUDENT)
  password         String?
  status           UserStatus      @default(PENDING)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  teacherOfCourses Course[]        @relation("Teacher")
  studentOfCourses Course[]        @relation("Student")
  scores           Score[]
  answers          StudentAnswer[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

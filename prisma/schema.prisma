// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id            Int            @id @default(autoincrement())
  name          String
  teacher       User           @relation(fields: [teacherId], references: [id], name: "Teacher")
  teacherId     String
  students      User[]         @relation("Student")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  announcements Announcement[]
}

model Announcement {
  id       Int    @id @default(autoincrement())
  title    String
  text     String
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int
}

// Necessary for Next auth
enum UserRole {
  TEACHER
  STUDENT
}

enum UserStatus {
  PENDING
  ACTIVATED
  DEACTIVATED
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  role             UserRole   @default(STUDENT)
  password         String?
  status           UserStatus @default(PENDING)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  teacherOfCourses Course[]   @relation("Teacher")
  studentOfCourses Course[]   @relation("Student")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
